{"version":3,"sources":["components/congrats/Congrats.tsx","components/guessedWords/GuessedWords.tsx","actions/index.ts","components/input/Input.tsx","helpers/index.ts","App.tsx","serviceWorker.ts","reducers/index.ts","reducers/successReducer.ts","reducers/guessedWordsReducers.ts","reducers/secretWordReducer.ts","configureStore.ts","index.tsx"],"names":["props","success","data-test","className","GuessedWords","guessedWordsRows","guessedWords","map","word","index","key","guessedWord","letterMatchCount","contents","length","actionTypes","secretWords","UnconnectedInput","state","currentGuess","submitGuessedWord","evt","preventDefault","guessWord","setState","content","this","type","value","onChange","target","placeholder","onClick","Component","connect","dispatch","getState","secretWord","secretLetterSet","Set","split","guessedLetterSet","filter","letter","has","getLetterMatchCount","payload","UnconnectedApp","getSecretWord","Congrats","Input","axios","get","then","response","data","catch","error","Math","floor","random","Boolean","window","location","hostname","match","combineReducers","newState","action","res","middlewares","ReduxThunk","createStoreWithMiddleware","applyMiddleware","createStore","rootReducer","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6abf65c.chunk.js","sourcesContent":["import React from 'react';\n\nexport interface ICongratsProps {\n    success?: boolean;\n}\n\n/**\n * Functional react component for congratulary message\n * @function\n * @param {object} props - React props.\n * @returns {JSX.Element} - Rendered component (or null if `success` props is)\n */\nexport default (props: ICongratsProps) => {\n    let res = !!props.success ? (\n        <div data-test=\"component-congrats\" className=\"alert alert-success\">\n            <span data-test=\"congrats-message\">\n                Congratulations! You guessed the word!\n            </span>\n        </div>\n    ) : (\n        <div data-test=\"component-congrats\" />\n    );\n\n    return res;\n}","import React from 'react';\nimport { IGuessedWord } from '../../common/interfaces';\n\nexport interface IGuessedWordsProps {\n  guessedWords: IGuessedWord[];\n}\n\nconst GuessedWords = (props: IGuessedWordsProps) => {\n  const guessedWordsRows = props.guessedWords.map(\n    (word: IGuessedWord, index: number) => (\n      <tr data-test='guessed-word' key={index}>\n        <td>{word.guessedWord}</td>\n        <td>{word.letterMatchCount}</td>\n      </tr>\n    )\n  );\n\n  let contents =\n    props.guessedWords.length === 0 ? (\n      <span data-test='guess-instructions'>Try to guess the secret word!</span>\n    ) : (\n      <div data-test='guessed-words'>\n        <h3>Guessed words</h3>\n        <table className=\"table table-sm\">\n          <thead className=\"thead-ligth\">\n            <tr>\n              <th>Guess</th>\n              <th>Matching letters</th>\n            </tr>\n          </thead>\n          <tbody>{guessedWordsRows}</tbody>\n        </table>\n      </div>\n    );\n\n  return <div data-test='component-guessed-words'>{contents}</div>;\n};\n\nexport default GuessedWords;\n","import axios from 'axios';\nimport { getLetterMatchCount } from '../helpers';\n\nexport const actionTypes = {\n  CORRECT_GUESS: 'CORRECT_GUESS',\n  GUESS_WORD: 'GUESS_WORD',\n  SET_SECRET_WORD: 'SET_SECRET_WORD',\n};\n\n/**\n * Returns Redux Thunk function that dispatches GUESS_WORD action and\n *  (conditionally) CORRECT_GUESS action\n * @function guessWord\n * @param {string} guessedWord - Guessed word.\n * @returns {function} - Redux Thunk function.\n */\nexport const guessWord = (guessedWord: string): any => {\n  return function(dispatch: Function, getState: any){\n    const secretWord = getState().secretWord;\n    const letterMatchCount = getLetterMatchCount(guessedWord, secretWord);\n\n    dispatch({\n      type: actionTypes.GUESS_WORD,\n      payload: { guessedWord, letterMatchCount }\n    });\n\n    if(guessedWord === secretWord) {\n      dispatch({ type: actionTypes.CORRECT_GUESS });\n    }\n  }\n};\n\nexport const getSecretWord = () => {\n  return (dispatch: any) => {\n    return axios.get('http://localhost:3030')\n      .then(response => {\n        dispatch({\n          type: actionTypes.SET_SECRET_WORD,\n          payload: response.data\n        });\n      })\n      .catch((error: any) => {\n        const index = Math.floor(Math.random() * secretWords.length);\n        dispatch({\n          type: actionTypes.SET_SECRET_WORD,\n          payload: secretWords[index]\n        });\n      });\n  }\n}\n\nconst secretWords = [\n  'Hello'\n];","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { guessWord } from '../../actions';\n\ninterface IInputProps {\n  success: boolean;\n  guessWord: any;\n}\n\ninterface IInputState {\n  currentGuess: string;\n}\n\nexport class UnconnectedInput extends Component<IInputProps, IInputState> {\n\n  state = {\n    currentGuess: ''\n  };\n\n  submitGuessedWord = (evt: any) => {\n    evt.preventDefault();\n    const guessedWord = this.state.currentGuess;\n\n    if(guessedWord && guessedWord.length > 0){\n      this.props.guessWord(guessedWord);\n      this.setState({currentGuess: ''});\n    }\n  }\n\n  render() {\n    const content = this.props.success ? <div/> : (\n      <form className='form-inline'>\n        <input\n          data-test=\"input-box\"\n          className='mb-2 mx-sm-3'\n          type='text'\n          value={this.state.currentGuess}\n          onChange={(evt) => this.setState({ currentGuess: evt.target.value })}\n          placeholder='enter guess'\n        />\n        <button\n          data-test='submit-button'\n          className='btn btn-primary mb-2'\n          onClick={(evt) => this.submitGuessedWord(evt)}\n          type='submit'>\n          Submit\n        </button>\n      </form>\n    );\n    return <div data-test='component-input'>{content}</div>;\n  }\n}\n\nconst mapStateToProps = ({ success }: any) => {\n  return { success };\n};\n\nexport default connect(mapStateToProps, { guessWord })(UnconnectedInput);\n","/**\n * @function getLetterMatchCount\n * @param {string} guessedWord - Guessed word.\n * @param {string} secretWord - Secret word.\n * @returns {number} - Number of letters matched between guessed word and secret word.\n */\nexport function getLetterMatchCount(guessedWord: string, secretWord: string): number {\n    const secretLetterSet = new Set(secretWord.split(''));\n    const guessedLetterSet = new Set(guessedWord.split(''));\n    return [...secretLetterSet].filter(letter => guessedLetterSet.has(letter)).length;\n};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport Congrats from './components/congrats/Congrats';\nimport GuessedWords from './components/guessedWords/GuessedWords';\nimport { getSecretWord } from './actions';\nimport { IGuessedWord } from './common/interfaces';\nimport Input from './components/input/Input';\n\ninterface IAppProps {\n  success: boolean;\n  guessedWords: IGuessedWord[];\n  //secretWord: string;\n  getSecretWord: any;\n}\n\nexport class UnconnectedApp extends Component<IAppProps, {}> {\n\n  componentDidMount() {\n    this.props.getSecretWord();\n  }\n  render() {\n    return (\n      <div className='container'>\n        <h1>Jotto</h1>\n        <Congrats success={this.props.success} />\n        <Input />\n        <GuessedWords\n          guessedWords={this.props.guessedWords}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  const { success, guessedWords, secretWord } = state;\n  return { success, guessedWords, secretWord };\n};\n\nexport default connect(\n  mapStateToProps,\n  { getSecretWord }\n)(UnconnectedApp);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport success from './successReducer';\nimport guessedWords from './guessedWordsReducers';\nimport secretWord from './secretWordReducer';\n\nexport default combineReducers({\n  success,\n  guessedWords,\n  secretWord,\n});","import { actionTypes } from '../actions';\n\n/**\n * @function successReducer\n * @param {array} state - Array of guessed words.\n * @param {object} action - action to be reduced.\n * @returns {boolean} - new success state.\n */\nexport default (state = false, action: any) => {\n  let newState;\n  \n  switch(action.type){\n    case actionTypes.CORRECT_GUESS:\n      newState = true;\n      break;\n    default:\n      newState = state;\n  }\n\n  return newState;\n} ","import { actionTypes } from '../actions';\n\n/**\n * @function guessedWordsReducer\n * @param {array} state - Array of guessed words.\n * @param {object} action - action to be reduced.\n * @returns {array} - new guessed state.\n */\nexport default (state: any[] = [], action: any): any[] => {\n  let res: any[];\n\n  switch(action.type){\n    case actionTypes.GUESS_WORD:\n      res = [...state, action.payload];\n      break;\n    default:\n      res = [...state];\n  }\n\n  return res;\n}","import { actionTypes } from '../actions';\n\n/**\n * @function secretWordReducer\n * @param {string} state - State before reducer.\n * @param {object} action - Action sent to reducer.\n * @returns {string} - New state (secret word payload from action).\n */\nexport default(state= null, action: any) => {\n  let res;\n\n  switch(action.type){\n    case actionTypes.SET_SECRET_WORD:\n      res = action.payload;\n      break;\n    default:\n      res = state;\n  }\n  return res;\n}","import { createStore, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nexport const middlewares = [ReduxThunk];\nconst createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore);\nexport default createStoreWithMiddleware(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './configureStore';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}